// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.1
// source: proto/item.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NFTType int32

const (
	NFTType_NFTTypeUnknown    NFTType = 0
	NFTType_NFTTypeConsumable NFTType = 1
	NFTType_NFTTypeEquipment  NFTType = 2
	NFTType_NFTTypeMaterial   NFTType = 3
	NFTType_NFTTypePlaceable  NFTType = 4
	NFTType_NFTTypeThird      NFTType = 5
	NFTType_NFTTypeWearable   NFTType = 6
)

// Enum value maps for NFTType.
var (
	NFTType_name = map[int32]string{
		0: "NFTTypeUnknown",
		1: "NFTTypeConsumable",
		2: "NFTTypeEquipment",
		3: "NFTTypeMaterial",
		4: "NFTTypePlaceable",
		5: "NFTTypeThird",
		6: "NFTTypeWearable",
	}
	NFTType_value = map[string]int32{
		"NFTTypeUnknown":    0,
		"NFTTypeConsumable": 1,
		"NFTTypeEquipment":  2,
		"NFTTypeMaterial":   3,
		"NFTTypePlaceable":  4,
		"NFTTypeThird":      5,
		"NFTTypeWearable":   6,
	}
)

func (x NFTType) Enum() *NFTType {
	p := new(NFTType)
	*p = x
	return p
}

func (x NFTType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NFTType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_item_proto_enumTypes[0].Descriptor()
}

func (NFTType) Type() protoreflect.EnumType {
	return &file_proto_item_proto_enumTypes[0]
}

func (x NFTType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NFTType.Descriptor instead.
func (NFTType) EnumDescriptor() ([]byte, []int) {
	return file_proto_item_proto_rawDescGZIP(), []int{0}
}

// NFT品质
type NFTRarity int32

const (
	NFTRarity_NFTRarityUnknown NFTRarity = 0 // 无
	NFTRarity_NFTRarityCommon  NFTRarity = 1 // 普通 common
	NFTRarity_NFTRarityRare    NFTRarity = 2 // 稀有 rare
	NFTRarity_NFTRarityEpic    NFTRarity = 3 // 史诗 epic
	NFTRarity_NFTRarityMythic  NFTRarity = 4 // 神话 mythic
	NFTRarity_NFTRarityUnique  NFTRarity = 5 // 唯一 unique
)

// Enum value maps for NFTRarity.
var (
	NFTRarity_name = map[int32]string{
		0: "NFTRarityUnknown",
		1: "NFTRarityCommon",
		2: "NFTRarityRare",
		3: "NFTRarityEpic",
		4: "NFTRarityMythic",
		5: "NFTRarityUnique",
	}
	NFTRarity_value = map[string]int32{
		"NFTRarityUnknown": 0,
		"NFTRarityCommon":  1,
		"NFTRarityRare":    2,
		"NFTRarityEpic":    3,
		"NFTRarityMythic":  4,
		"NFTRarityUnique":  5,
	}
)

func (x NFTRarity) Enum() *NFTRarity {
	p := new(NFTRarity)
	*p = x
	return p
}

func (x NFTRarity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NFTRarity) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_item_proto_enumTypes[1].Descriptor()
}

func (NFTRarity) Type() protoreflect.EnumType {
	return &file_proto_item_proto_enumTypes[1]
}

func (x NFTRarity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NFTRarity.Descriptor instead.
func (NFTRarity) EnumDescriptor() ([]byte, []int) {
	return file_proto_item_proto_rawDescGZIP(), []int{1}
}

// 消耗品作用类型
type NFTConsumableType int32

const (
	NFTConsumableType_NFTConsumableTypeRestoreHP   NFTConsumableType = 0
	NFTConsumableType_NFTConsumableTypeLearnRecipe NFTConsumableType = 1
	NFTConsumableType_NFTConsumableTypeAddBuff     NFTConsumableType = 2
)

// Enum value maps for NFTConsumableType.
var (
	NFTConsumableType_name = map[int32]string{
		0: "NFTConsumableTypeRestoreHP",
		1: "NFTConsumableTypeLearnRecipe",
		2: "NFTConsumableTypeAddBuff",
	}
	NFTConsumableType_value = map[string]int32{
		"NFTConsumableTypeRestoreHP":   0,
		"NFTConsumableTypeLearnRecipe": 1,
		"NFTConsumableTypeAddBuff":     2,
	}
)

func (x NFTConsumableType) Enum() *NFTConsumableType {
	p := new(NFTConsumableType)
	*p = x
	return p
}

func (x NFTConsumableType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NFTConsumableType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_item_proto_enumTypes[2].Descriptor()
}

func (NFTConsumableType) Type() protoreflect.EnumType {
	return &file_proto_item_proto_enumTypes[2]
}

func (x NFTConsumableType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NFTConsumableType.Descriptor instead.
func (NFTConsumableType) EnumDescriptor() ([]byte, []int) {
	return file_proto_item_proto_rawDescGZIP(), []int{2}
}

//道具为什么被扣除
type TakeReason int32

const (
	// 被使用(包含道具使用 和 建造扣除)
	TakeReason_TakeReasonOnUse TakeReason = 0
	// 玩家丢弃
	TakeReason_TakeReasonDrop TakeReason = 1
	// 死亡掉落
	TakeReason_TakeReasonBurst TakeReason = 2
	// 任务扣除
	TakeReason_TakeReasonTaskTake TakeReason = 3
	// 创建领地
	TakeReason_TakeReasonManorCreate TakeReason = 4
)

// Enum value maps for TakeReason.
var (
	TakeReason_name = map[int32]string{
		0: "TakeReasonOnUse",
		1: "TakeReasonDrop",
		2: "TakeReasonBurst",
		3: "TakeReasonTaskTake",
		4: "TakeReasonManorCreate",
	}
	TakeReason_value = map[string]int32{
		"TakeReasonOnUse":       0,
		"TakeReasonDrop":        1,
		"TakeReasonBurst":       2,
		"TakeReasonTaskTake":    3,
		"TakeReasonManorCreate": 4,
	}
)

func (x TakeReason) Enum() *TakeReason {
	p := new(TakeReason)
	*p = x
	return p
}

func (x TakeReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TakeReason) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_item_proto_enumTypes[3].Descriptor()
}

func (TakeReason) Type() protoreflect.EnumType {
	return &file_proto_item_proto_enumTypes[3]
}

func (x TakeReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TakeReason.Descriptor instead.
func (TakeReason) EnumDescriptor() ([]byte, []int) {
	return file_proto_item_proto_rawDescGZIP(), []int{3}
}

type ItemType int32

const (
	// 游戏道具
	ItemType_ItemTypeGame ItemType = 0
	// 放置类NFT
	ItemType_ItemTypeNFT ItemType = 1
)

// Enum value maps for ItemType.
var (
	ItemType_name = map[int32]string{
		0: "ItemTypeGame",
		1: "ItemTypeNFT",
	}
	ItemType_value = map[string]int32{
		"ItemTypeGame": 0,
		"ItemTypeNFT":  1,
	}
)

func (x ItemType) Enum() *ItemType {
	p := new(ItemType)
	*p = x
	return p
}

func (x ItemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ItemType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_item_proto_enumTypes[4].Descriptor()
}

func (ItemType) Type() protoreflect.EnumType {
	return &file_proto_item_proto_enumTypes[4]
}

func (x ItemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ItemType.Descriptor instead.
func (ItemType) EnumDescriptor() ([]byte, []int) {
	return file_proto_item_proto_rawDescGZIP(), []int{4}
}

// 装备属性Type
type AttributeType int32

const (
	AttributeType_AttributeTypeUnknown AttributeType = 0
	// HP limit
	AttributeType_AttributeTypeHpLimit AttributeType = 1
	// HP Recovery
	AttributeType_AttributeTypeHpRecovery AttributeType = 2
	// 增加普通攻击
	AttributeType_AttributeTypeAtt AttributeType = 3
	// 增加普通攻击速度
	AttributeType_AttributeTypeAttSpeed AttributeType = 4
	// 增加普通防御
	AttributeType_AttributeTypeDef AttributeType = 5
	// 增加暴击率
	AttributeType_AttributeTypeCrit AttributeType = 6
	// 增加暴击伤害
	AttributeType_AttributeTypeCritDmg AttributeType = 7
	// 增加命中率
	AttributeType_AttributeTypeHitRate AttributeType = 8
	// 增加闪避率
	AttributeType_AttributeTypeMissRate AttributeType = 9
	// 移动速度
	AttributeType_AttributeTypeMoveSpeed AttributeType = 10
	// 挂载的技能ID
	AttributeType_AttributeTypeSkillId AttributeType = 99
)

// Enum value maps for AttributeType.
var (
	AttributeType_name = map[int32]string{
		0:  "AttributeTypeUnknown",
		1:  "AttributeTypeHpLimit",
		2:  "AttributeTypeHpRecovery",
		3:  "AttributeTypeAtt",
		4:  "AttributeTypeAttSpeed",
		5:  "AttributeTypeDef",
		6:  "AttributeTypeCrit",
		7:  "AttributeTypeCritDmg",
		8:  "AttributeTypeHitRate",
		9:  "AttributeTypeMissRate",
		10: "AttributeTypeMoveSpeed",
		99: "AttributeTypeSkillId",
	}
	AttributeType_value = map[string]int32{
		"AttributeTypeUnknown":    0,
		"AttributeTypeHpLimit":    1,
		"AttributeTypeHpRecovery": 2,
		"AttributeTypeAtt":        3,
		"AttributeTypeAttSpeed":   4,
		"AttributeTypeDef":        5,
		"AttributeTypeCrit":       6,
		"AttributeTypeCritDmg":    7,
		"AttributeTypeHitRate":    8,
		"AttributeTypeMissRate":   9,
		"AttributeTypeMoveSpeed":  10,
		"AttributeTypeSkillId":    99,
	}
)

func (x AttributeType) Enum() *AttributeType {
	p := new(AttributeType)
	*p = x
	return p
}

func (x AttributeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttributeType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_item_proto_enumTypes[5].Descriptor()
}

func (AttributeType) Type() protoreflect.EnumType {
	return &file_proto_item_proto_enumTypes[5]
}

func (x AttributeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AttributeType.Descriptor instead.
func (AttributeType) EnumDescriptor() ([]byte, []int) {
	return file_proto_item_proto_rawDescGZIP(), []int{5}
}

// 玩家装备位置
type AvatarPosition int32

const (
	// 没有装备位置
	AvatarPosition_AvatarPositionNone AvatarPosition = 0
	// 头盔
	AvatarPosition_AvatarPositionHead AvatarPosition = 1
	// 上衣
	AvatarPosition_AvatarPositionCoat AvatarPosition = 2
	// 裤子
	AvatarPosition_AvatarPositionPant AvatarPosition = 3
	// 鞋子
	AvatarPosition_AvatarPositionShoe AvatarPosition = 4
	// 手
	AvatarPosition_AvatarPositionHand AvatarPosition = 5
	// 饰品
	AvatarPosition_AvatarPositionAccessory AvatarPosition = 6
	// 武器
	AvatarPosition_AvatarPositionWeapon AvatarPosition = 7
)

// Enum value maps for AvatarPosition.
var (
	AvatarPosition_name = map[int32]string{
		0: "AvatarPositionNone",
		1: "AvatarPositionHead",
		2: "AvatarPositionCoat",
		3: "AvatarPositionPant",
		4: "AvatarPositionShoe",
		5: "AvatarPositionHand",
		6: "AvatarPositionAccessory",
		7: "AvatarPositionWeapon",
	}
	AvatarPosition_value = map[string]int32{
		"AvatarPositionNone":      0,
		"AvatarPositionHead":      1,
		"AvatarPositionCoat":      2,
		"AvatarPositionPant":      3,
		"AvatarPositionShoe":      4,
		"AvatarPositionHand":      5,
		"AvatarPositionAccessory": 6,
		"AvatarPositionWeapon":    7,
	}
)

func (x AvatarPosition) Enum() *AvatarPosition {
	p := new(AvatarPosition)
	*p = x
	return p
}

func (x AvatarPosition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AvatarPosition) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_item_proto_enumTypes[6].Descriptor()
}

func (AvatarPosition) Type() protoreflect.EnumType {
	return &file_proto_item_proto_enumTypes[6]
}

func (x AvatarPosition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AvatarPosition.Descriptor instead.
func (AvatarPosition) EnumDescriptor() ([]byte, []int) {
	return file_proto_item_proto_rawDescGZIP(), []int{6}
}

// 消耗品
type NFTConsumableInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quality        string            `protobuf:"bytes,1,opt,name=quality,proto3" json:"quality,omitempty"`
	ConsumableType NFTConsumableType `protobuf:"varint,2,opt,name=consumable_type,json=consumableType,proto3,enum=gameMessageCore.NFTConsumableType" json:"consumable_type,omitempty"`
	Value          int32             `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NFTConsumableInfo) Reset() {
	*x = NFTConsumableInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_item_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFTConsumableInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFTConsumableInfo) ProtoMessage() {}

func (x *NFTConsumableInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_item_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFTConsumableInfo.ProtoReflect.Descriptor instead.
func (*NFTConsumableInfo) Descriptor() ([]byte, []int) {
	return file_proto_item_proto_rawDescGZIP(), []int{0}
}

func (x *NFTConsumableInfo) GetQuality() string {
	if x != nil {
		return x.Quality
	}
	return ""
}

func (x *NFTConsumableInfo) GetConsumableType() NFTConsumableType {
	if x != nil {
		return x.ConsumableType
	}
	return NFTConsumableType_NFTConsumableTypeRestoreHP
}

func (x *NFTConsumableInfo) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type NftSkill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillId    int32 `protobuf:"varint,1,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
	SkillLevel int32 `protobuf:"varint,2,opt,name=skill_level,json=skillLevel,proto3" json:"skill_level,omitempty"`
}

func (x *NftSkill) Reset() {
	*x = NftSkill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_item_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NftSkill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NftSkill) ProtoMessage() {}

func (x *NftSkill) ProtoReflect() protoreflect.Message {
	mi := &file_proto_item_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NftSkill.ProtoReflect.Descriptor instead.
func (*NftSkill) Descriptor() ([]byte, []int) {
	return file_proto_item_proto_rawDescGZIP(), []int{1}
}

func (x *NftSkill) GetSkillId() int32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

func (x *NftSkill) GetSkillLevel() int32 {
	if x != nil {
		return x.SkillLevel
	}
	return 0
}

// 放置类NFT道具
type NftPlaceableInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// 第三方NFT 没有cid
	ObjectCid int32 `protobuf:"varint,2,opt,name=object_cid,json=objectCid,proto3" json:"object_cid,omitempty"`
	// nft 品质 第三方NFT 没有cid
	PlaceableRarity NFTRarity `protobuf:"varint,3,opt,name=placeable_rarity,json=placeableRarity,proto3,enum=gameMessageCore.NFTRarity" json:"placeable_rarity,omitempty"`
	// 道具关联技能
	Skills []*NftSkill `protobuf:"bytes,4,rep,name=skills,proto3" json:"skills,omitempty"`
}

func (x *NftPlaceableInfo) Reset() {
	*x = NftPlaceableInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_item_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NftPlaceableInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NftPlaceableInfo) ProtoMessage() {}

func (x *NftPlaceableInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_item_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NftPlaceableInfo.ProtoReflect.Descriptor instead.
func (*NftPlaceableInfo) Descriptor() ([]byte, []int) {
	return file_proto_item_proto_rawDescGZIP(), []int{2}
}

func (x *NftPlaceableInfo) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *NftPlaceableInfo) GetObjectCid() int32 {
	if x != nil {
		return x.ObjectCid
	}
	return 0
}

func (x *NftPlaceableInfo) GetPlaceableRarity() NFTRarity {
	if x != nil {
		return x.PlaceableRarity
	}
	return NFTRarity_NFTRarityUnknown
}

func (x *NftPlaceableInfo) GetSkills() []*NftSkill {
	if x != nil {
		return x.Skills
	}
	return nil
}

// 第三方NFT道具信息
type NftThirdNftInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// 显示资源URL
	ResUrl string `protobuf:"bytes,2,opt,name=res_url,json=resUrl,proto3" json:"res_url,omitempty"`
	// 描述信息
	Desc string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	// 放置过期时间
	TimeOutSec int32 `protobuf:"varint,4,opt,name=time_out_sec,json=timeOutSec,proto3" json:"time_out_sec,omitempty"`
	// token (address)
	TokenUrl string `protobuf:"bytes,5,opt,name=token_url,json=tokenUrl,proto3" json:"token_url,omitempty"`
	// token Id
	TokenId string `protobuf:"bytes,6,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
}

func (x *NftThirdNftInfo) Reset() {
	*x = NftThirdNftInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_item_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NftThirdNftInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NftThirdNftInfo) ProtoMessage() {}

func (x *NftThirdNftInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_item_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NftThirdNftInfo.ProtoReflect.Descriptor instead.
func (*NftThirdNftInfo) Descriptor() ([]byte, []int) {
	return file_proto_item_proto_rawDescGZIP(), []int{3}
}

func (x *NftThirdNftInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NftThirdNftInfo) GetResUrl() string {
	if x != nil {
		return x.ResUrl
	}
	return ""
}

func (x *NftThirdNftInfo) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *NftThirdNftInfo) GetTimeOutSec() int32 {
	if x != nil {
		return x.TimeOutSec
	}
	return 0
}

func (x *NftThirdNftInfo) GetTokenUrl() string {
	if x != nil {
		return x.TokenUrl
	}
	return ""
}

func (x *NftThirdNftInfo) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

// 装备类NFT道具信息
type NftWearableInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token          string    `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	ObjectCid      int32     `protobuf:"varint,2,opt,name=object_cid,json=objectCid,proto3" json:"object_cid,omitempty"`
	WearableRarity NFTRarity `protobuf:"varint,3,opt,name=wearable_rarity,json=wearableRarity,proto3,enum=gameMessageCore.NFTRarity" json:"wearable_rarity,omitempty"`
}

func (x *NftWearableInfo) Reset() {
	*x = NftWearableInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_item_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NftWearableInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NftWearableInfo) ProtoMessage() {}

func (x *NftWearableInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_item_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NftWearableInfo.ProtoReflect.Descriptor instead.
func (*NftWearableInfo) Descriptor() ([]byte, []int) {
	return file_proto_item_proto_rawDescGZIP(), []int{4}
}

func (x *NftWearableInfo) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *NftWearableInfo) GetObjectCid() int32 {
	if x != nil {
		return x.ObjectCid
	}
	return 0
}

func (x *NftWearableInfo) GetWearableRarity() NFTRarity {
	if x != nil {
		return x.WearableRarity
	}
	return NFTRarity_NFTRarityUnknown
}

// 装备属性(保存的是增量-实际数据 = 增量 + 配置数据)
type AvatarAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 稀有度 unique,  mythic, epic, rare, common
	Rarity string `protobuf:"bytes,1,opt,name=rarity,proto3" json:"rarity,omitempty"`
	// 耐久度
	Durability int32 `protobuf:"varint,2,opt,name=durability,proto3" json:"durability,omitempty"`
	// 属性增量
	Data []*AttributeData `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *AvatarAttribute) Reset() {
	*x = AvatarAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_item_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvatarAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarAttribute) ProtoMessage() {}

func (x *AvatarAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_proto_item_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarAttribute.ProtoReflect.Descriptor instead.
func (*AvatarAttribute) Descriptor() ([]byte, []int) {
	return file_proto_item_proto_rawDescGZIP(), []int{5}
}

func (x *AvatarAttribute) GetRarity() string {
	if x != nil {
		return x.Rarity
	}
	return ""
}

func (x *AvatarAttribute) GetDurability() int32 {
	if x != nil {
		return x.Durability
	}
	return 0
}

func (x *AvatarAttribute) GetData() []*AttributeData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 属性字段增量数据 1v1
type AttributeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type
	Type AttributeType `protobuf:"varint,1,opt,name=type,proto3,enum=gameMessageCore.AttributeType" json:"type,omitempty"`
	// 增量数值
	Value int32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AttributeData) Reset() {
	*x = AttributeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_item_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeData) ProtoMessage() {}

func (x *AttributeData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_item_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeData.ProtoReflect.Descriptor instead.
func (*AttributeData) Descriptor() ([]byte, []int) {
	return file_proto_item_proto_rawDescGZIP(), []int{6}
}

func (x *AttributeData) GetType() AttributeType {
	if x != nil {
		return x.Type
	}
	return AttributeType_AttributeTypeUnknown
}

func (x *AttributeData) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// 道具
type Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemType ItemType `protobuf:"varint,1,opt,name=item_type,json=itemType,proto3,enum=gameMessageCore.ItemType" json:"item_type,omitempty"`
	Id       string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// 对应的 objectId,
	ObjectCid int32  `protobuf:"varint,3,opt,name=object_cid,json=objectCid,proto3" json:"object_cid,omitempty"`
	Num       int32  `protobuf:"varint,4,opt,name=num,proto3" json:"num,omitempty"`
	Player    string `protobuf:"bytes,5,opt,name=player,proto3" json:"player,omitempty"`
	// 装备属性配置
	Attribute *AvatarAttribute `protobuf:"bytes,8,opt,name=attribute,proto3" json:"attribute,omitempty"`
	AvatarPos AvatarPosition   `protobuf:"varint,9,opt,name=avatar_pos,json=avatarPos,proto3,enum=gameMessageCore.AvatarPosition" json:"avatar_pos,omitempty"`
	// nft资产如果建造在地图中了此时 nft_using = true
	NftUsing bool `protobuf:"varint,10,opt,name=nft_using,json=nftUsing,proto3" json:"nft_using,omitempty"`
	// nft 详细数据
	NftJsonData string `protobuf:"bytes,11,opt,name=nft_json_data,json=nftJsonData,proto3" json:"nft_json_data,omitempty"`
	// nft 过期时间
	NftTimeOutSec int32 `protobuf:"varint,12,opt,name=nft_time_out_sec,json=nftTimeOutSec,proto3" json:"nft_time_out_sec,omitempty"`
}

func (x *Item) Reset() {
	*x = Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_item_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Item) ProtoMessage() {}

func (x *Item) ProtoReflect() protoreflect.Message {
	mi := &file_proto_item_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Item.ProtoReflect.Descriptor instead.
func (*Item) Descriptor() ([]byte, []int) {
	return file_proto_item_proto_rawDescGZIP(), []int{7}
}

func (x *Item) GetItemType() ItemType {
	if x != nil {
		return x.ItemType
	}
	return ItemType_ItemTypeGame
}

func (x *Item) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Item) GetObjectCid() int32 {
	if x != nil {
		return x.ObjectCid
	}
	return 0
}

func (x *Item) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *Item) GetPlayer() string {
	if x != nil {
		return x.Player
	}
	return ""
}

func (x *Item) GetAttribute() *AvatarAttribute {
	if x != nil {
		return x.Attribute
	}
	return nil
}

func (x *Item) GetAvatarPos() AvatarPosition {
	if x != nil {
		return x.AvatarPos
	}
	return AvatarPosition_AvatarPositionNone
}

func (x *Item) GetNftUsing() bool {
	if x != nil {
		return x.NftUsing
	}
	return false
}

func (x *Item) GetNftJsonData() string {
	if x != nil {
		return x.NftJsonData
	}
	return ""
}

func (x *Item) GetNftTimeOutSec() int32 {
	if x != nil {
		return x.NftTimeOutSec
	}
	return 0
}

type ItemBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cid     int32 `protobuf:"varint,1,opt,name=cid,proto3" json:"cid,omitempty"`
	Num     int32 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
	Quality int32 `protobuf:"varint,3,opt,name=quality,proto3" json:"quality,omitempty"`
}

func (x *ItemBaseInfo) Reset() {
	*x = ItemBaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_item_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemBaseInfo) ProtoMessage() {}

func (x *ItemBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_item_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemBaseInfo.ProtoReflect.Descriptor instead.
func (*ItemBaseInfo) Descriptor() ([]byte, []int) {
	return file_proto_item_proto_rawDescGZIP(), []int{8}
}

func (x *ItemBaseInfo) GetCid() int32 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *ItemBaseInfo) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *ItemBaseInfo) GetQuality() int32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

var File_proto_item_proto protoreflect.FileDescriptor

var file_proto_item_proto_rawDesc = []byte{
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0f, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x72, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x11, 0x4e, 0x46, 0x54, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x4e,
	0x46, 0x54, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x46, 0x0a, 0x08, 0x4e, 0x66, 0x74, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xc1,
	0x01, 0x0a, 0x10, 0x4e, 0x66, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x43, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x46, 0x54, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x52, 0x0f,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x31, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x66, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x0f, 0x4e, 0x66, 0x74, 0x54, 0x68, 0x69, 0x72, 0x64, 0x4e,
	0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x64, 0x22, 0x8b, 0x01, 0x0a, 0x0f, 0x4e, 0x66, 0x74, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x0f, 0x77, 0x65,
	0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x46, 0x54, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x52,
	0x0e, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x22,
	0x7d, 0x0a, 0x0f, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x75,
	0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x64, 0x75, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x59,
	0x0a, 0x0d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x2e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x81, 0x03, 0x0a, 0x04, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x36, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x70, 0x6f,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x50, 0x6f, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x66, 0x74, 0x5f, 0x75, 0x73, 0x69, 0x6e, 0x67,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x66, 0x74, 0x55, 0x73, 0x69, 0x6e, 0x67,
	0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x66, 0x74, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x66, 0x74, 0x4a, 0x73, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x10, 0x6e, 0x66, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x6e, 0x66, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x22, 0x4c, 0x0a,
	0x0c, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a,
	0x03, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75,
	0x6d, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2a, 0x9c, 0x01, 0x0a, 0x07,
	0x4e, 0x46, 0x54, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x46, 0x54, 0x54, 0x79,
	0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4e,
	0x46, 0x54, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x46, 0x54, 0x54, 0x79, 0x70, 0x65, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x46, 0x54, 0x54,
	0x79, 0x70, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x10, 0x03, 0x12, 0x14, 0x0a,
	0x10, 0x4e, 0x46, 0x54, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x46, 0x54, 0x54, 0x79, 0x70, 0x65, 0x54, 0x68,
	0x69, 0x72, 0x64, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x46, 0x54, 0x54, 0x79, 0x70, 0x65,
	0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x06, 0x2a, 0x86, 0x01, 0x0a, 0x09, 0x4e,
	0x46, 0x54, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x46, 0x54, 0x52,
	0x61, 0x72, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0f, 0x4e, 0x46, 0x54, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x46, 0x54, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x61, 0x72, 0x65, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x46, 0x54, 0x52, 0x61, 0x72,
	0x69, 0x74, 0x79, 0x45, 0x70, 0x69, 0x63, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x46, 0x54,
	0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x79, 0x74, 0x68, 0x69, 0x63, 0x10, 0x04, 0x12, 0x13,
	0x0a, 0x0f, 0x4e, 0x46, 0x54, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x10, 0x05, 0x2a, 0x73, 0x0a, 0x11, 0x4e, 0x46, 0x54, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x4e, 0x46, 0x54, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x48, 0x50, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x4e, 0x46, 0x54, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x65, 0x61,
	0x72, 0x6e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x46,
	0x54, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x41,
	0x64, 0x64, 0x42, 0x75, 0x66, 0x66, 0x10, 0x02, 0x2a, 0x7d, 0x0a, 0x0a, 0x54, 0x61, 0x6b, 0x65,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x61, 0x6b, 0x65, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x4f, 0x6e, 0x55, 0x73, 0x65, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x54,
	0x61, 0x6b, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x44, 0x72, 0x6f, 0x70, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x54, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x75, 0x72,
	0x73, 0x74, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x61, 0x6b, 0x65, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15,
	0x54, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x6f, 0x72, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x10, 0x04, 0x2a, 0x2d, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x47,
	0x61, 0x6d, 0x65, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x4e, 0x46, 0x54, 0x10, 0x01, 0x2a, 0xc3, 0x02, 0x0a, 0x0d, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x70, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x41, 0x74, 0x74, 0x10, 0x03, 0x12,
	0x19, 0x0a, 0x15, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x41, 0x74, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x10, 0x05,
	0x12, 0x15, 0x0a, 0x11, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x72, 0x69, 0x74, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x72, 0x69, 0x74, 0x44, 0x6d, 0x67, 0x10,
	0x07, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x69, 0x73, 0x73,
	0x52, 0x61, 0x74, 0x65, 0x10, 0x09, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x10, 0x63, 0x2a, 0xd7, 0x01, 0x0a,
	0x0e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x12, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x10, 0x01, 0x12,
	0x16, 0x0a, 0x12, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x61, 0x74, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x6e, 0x74, 0x10, 0x03, 0x12,
	0x16, 0x0a, 0x12, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x68, 0x6f, 0x65, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x10, 0x05, 0x12,
	0x1b, 0x0a, 0x17, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x79, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x65,
	0x61, 0x70, 0x6f, 0x6e, 0x10, 0x07, 0x42, 0x13, 0x5a, 0x11, 0x2e, 0x2f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x47, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_proto_item_proto_rawDescOnce sync.Once
	file_proto_item_proto_rawDescData = file_proto_item_proto_rawDesc
)

func file_proto_item_proto_rawDescGZIP() []byte {
	file_proto_item_proto_rawDescOnce.Do(func() {
		file_proto_item_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_item_proto_rawDescData)
	})
	return file_proto_item_proto_rawDescData
}

var file_proto_item_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_proto_item_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_proto_item_proto_goTypes = []interface{}{
	(NFTType)(0),              // 0: gameMessageCore.NFTType
	(NFTRarity)(0),            // 1: gameMessageCore.NFTRarity
	(NFTConsumableType)(0),    // 2: gameMessageCore.NFTConsumableType
	(TakeReason)(0),           // 3: gameMessageCore.TakeReason
	(ItemType)(0),             // 4: gameMessageCore.ItemType
	(AttributeType)(0),        // 5: gameMessageCore.AttributeType
	(AvatarPosition)(0),       // 6: gameMessageCore.AvatarPosition
	(*NFTConsumableInfo)(nil), // 7: gameMessageCore.NFTConsumableInfo
	(*NftSkill)(nil),          // 8: gameMessageCore.NftSkill
	(*NftPlaceableInfo)(nil),  // 9: gameMessageCore.NftPlaceableInfo
	(*NftThirdNftInfo)(nil),   // 10: gameMessageCore.NftThirdNftInfo
	(*NftWearableInfo)(nil),   // 11: gameMessageCore.NftWearableInfo
	(*AvatarAttribute)(nil),   // 12: gameMessageCore.AvatarAttribute
	(*AttributeData)(nil),     // 13: gameMessageCore.AttributeData
	(*Item)(nil),              // 14: gameMessageCore.Item
	(*ItemBaseInfo)(nil),      // 15: gameMessageCore.ItemBaseInfo
}
var file_proto_item_proto_depIdxs = []int32{
	2,  // 0: gameMessageCore.NFTConsumableInfo.consumable_type:type_name -> gameMessageCore.NFTConsumableType
	1,  // 1: gameMessageCore.NftPlaceableInfo.placeable_rarity:type_name -> gameMessageCore.NFTRarity
	8,  // 2: gameMessageCore.NftPlaceableInfo.skills:type_name -> gameMessageCore.NftSkill
	1,  // 3: gameMessageCore.NftWearableInfo.wearable_rarity:type_name -> gameMessageCore.NFTRarity
	13, // 4: gameMessageCore.AvatarAttribute.data:type_name -> gameMessageCore.AttributeData
	5,  // 5: gameMessageCore.AttributeData.type:type_name -> gameMessageCore.AttributeType
	4,  // 6: gameMessageCore.Item.item_type:type_name -> gameMessageCore.ItemType
	12, // 7: gameMessageCore.Item.attribute:type_name -> gameMessageCore.AvatarAttribute
	6,  // 8: gameMessageCore.Item.avatar_pos:type_name -> gameMessageCore.AvatarPosition
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_proto_item_proto_init() }
func file_proto_item_proto_init() {
	if File_proto_item_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_item_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFTConsumableInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_item_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NftSkill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_item_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NftPlaceableInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_item_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NftThirdNftInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_item_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NftWearableInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_item_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvatarAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_item_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_item_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_item_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemBaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_item_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_item_proto_goTypes,
		DependencyIndexes: file_proto_item_proto_depIdxs,
		EnumInfos:         file_proto_item_proto_enumTypes,
		MessageInfos:      file_proto_item_proto_msgTypes,
	}.Build()
	File_proto_item_proto = out.File
	file_proto_item_proto_rawDesc = nil
	file_proto_item_proto_goTypes = nil
	file_proto_item_proto_depIdxs = nil
}
