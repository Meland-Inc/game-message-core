// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.1
// source: grpcEventData.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 玩家进入游戏
type UserEnterGameEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgVersion        int64           `protobuf:"varint,1,opt,name=msg_version,json=msgVersion,proto3" json:"msg_version,omitempty"`
	SceneServiceAppId string          `protobuf:"bytes,2,opt,name=scene_service_app_id,json=sceneServiceAppId,proto3" json:"scene_service_app_id,omitempty"`
	MapId             int32           `protobuf:"varint,3,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	BaseData          *PlayerBaseData `protobuf:"bytes,4,opt,name=base_data,json=baseData,proto3" json:"base_data,omitempty"`
	Position          *Vector3        `protobuf:"bytes,5,opt,name=position,proto3" json:"position,omitempty"`
	Dir               *Vector3        `protobuf:"bytes,6,opt,name=dir,proto3" json:"dir,omitempty"`
}

func (x *UserEnterGameEvent) Reset() {
	*x = UserEnterGameEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpcEventData_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEnterGameEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEnterGameEvent) ProtoMessage() {}

func (x *UserEnterGameEvent) ProtoReflect() protoreflect.Message {
	mi := &file_grpcEventData_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEnterGameEvent.ProtoReflect.Descriptor instead.
func (*UserEnterGameEvent) Descriptor() ([]byte, []int) {
	return file_grpcEventData_proto_rawDescGZIP(), []int{0}
}

func (x *UserEnterGameEvent) GetMsgVersion() int64 {
	if x != nil {
		return x.MsgVersion
	}
	return 0
}

func (x *UserEnterGameEvent) GetSceneServiceAppId() string {
	if x != nil {
		return x.SceneServiceAppId
	}
	return ""
}

func (x *UserEnterGameEvent) GetMapId() int32 {
	if x != nil {
		return x.MapId
	}
	return 0
}

func (x *UserEnterGameEvent) GetBaseData() *PlayerBaseData {
	if x != nil {
		return x.BaseData
	}
	return nil
}

func (x *UserEnterGameEvent) GetPosition() *Vector3 {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *UserEnterGameEvent) GetDir() *Vector3 {
	if x != nil {
		return x.Dir
	}
	return nil
}

// 玩家击杀怪物
type KillMonsterEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgVersion        int64           `protobuf:"varint,1,opt,name=msg_version,json=msgVersion,proto3" json:"msg_version,omitempty"`
	SceneServiceAppId string          `protobuf:"bytes,2,opt,name=scene_service_app_id,json=sceneServiceAppId,proto3" json:"scene_service_app_id,omitempty"`
	UserId            int64           `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	MapId             int32           `protobuf:"varint,4,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	Position          *Vector3        `protobuf:"bytes,5,opt,name=position,proto3" json:"position,omitempty"`
	MonsterCid        int32           `protobuf:"varint,6,opt,name=monster_cid,json=monsterCid,proto3" json:"monster_cid,omitempty"`
	MonsterName       string          `protobuf:"bytes,7,opt,name=monster_name,json=monsterName,proto3" json:"monster_name,omitempty"`
	Exp               int32           `protobuf:"varint,8,opt,name=exp,proto3" json:"exp,omitempty"`
	DropList          []*ItemBaseInfo `protobuf:"bytes,9,rep,name=drop_list,json=dropList,proto3" json:"drop_list,omitempty"`
}

func (x *KillMonsterEvent) Reset() {
	*x = KillMonsterEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpcEventData_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KillMonsterEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KillMonsterEvent) ProtoMessage() {}

func (x *KillMonsterEvent) ProtoReflect() protoreflect.Message {
	mi := &file_grpcEventData_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KillMonsterEvent.ProtoReflect.Descriptor instead.
func (*KillMonsterEvent) Descriptor() ([]byte, []int) {
	return file_grpcEventData_proto_rawDescGZIP(), []int{1}
}

func (x *KillMonsterEvent) GetMsgVersion() int64 {
	if x != nil {
		return x.MsgVersion
	}
	return 0
}

func (x *KillMonsterEvent) GetSceneServiceAppId() string {
	if x != nil {
		return x.SceneServiceAppId
	}
	return ""
}

func (x *KillMonsterEvent) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *KillMonsterEvent) GetMapId() int32 {
	if x != nil {
		return x.MapId
	}
	return 0
}

func (x *KillMonsterEvent) GetPosition() *Vector3 {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *KillMonsterEvent) GetMonsterCid() int32 {
	if x != nil {
		return x.MonsterCid
	}
	return 0
}

func (x *KillMonsterEvent) GetMonsterName() string {
	if x != nil {
		return x.MonsterName
	}
	return ""
}

func (x *KillMonsterEvent) GetExp() int32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *KillMonsterEvent) GetDropList() []*ItemBaseInfo {
	if x != nil {
		return x.DropList
	}
	return nil
}

// 玩家死亡
type PlayerDeathEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgVersion        int64      `protobuf:"varint,1,opt,name=msg_version,json=msgVersion,proto3" json:"msg_version,omitempty"`
	SceneServiceAppId string     `protobuf:"bytes,2,opt,name=scene_service_app_id,json=sceneServiceAppId,proto3" json:"scene_service_app_id,omitempty"`
	UserId            int64      `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	MapId             int32      `protobuf:"varint,4,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	Position          *Vector3   `protobuf:"bytes,5,opt,name=position,proto3" json:"position,omitempty"`
	KillerType        EntityType `protobuf:"varint,6,opt,name=killer_type,json=killerType,proto3,enum=gameMessageCore.EntityType" json:"killer_type,omitempty"`
	KillerId          int64      `protobuf:"varint,7,opt,name=killer_id,json=killerId,proto3" json:"killer_id,omitempty"`
	KillerName        string     `protobuf:"bytes,8,opt,name=killer_name,json=killerName,proto3" json:"killer_name,omitempty"`
}

func (x *PlayerDeathEvent) Reset() {
	*x = PlayerDeathEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpcEventData_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDeathEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDeathEvent) ProtoMessage() {}

func (x *PlayerDeathEvent) ProtoReflect() protoreflect.Message {
	mi := &file_grpcEventData_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDeathEvent.ProtoReflect.Descriptor instead.
func (*PlayerDeathEvent) Descriptor() ([]byte, []int) {
	return file_grpcEventData_proto_rawDescGZIP(), []int{2}
}

func (x *PlayerDeathEvent) GetMsgVersion() int64 {
	if x != nil {
		return x.MsgVersion
	}
	return 0
}

func (x *PlayerDeathEvent) GetSceneServiceAppId() string {
	if x != nil {
		return x.SceneServiceAppId
	}
	return ""
}

func (x *PlayerDeathEvent) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PlayerDeathEvent) GetMapId() int32 {
	if x != nil {
		return x.MapId
	}
	return 0
}

func (x *PlayerDeathEvent) GetPosition() *Vector3 {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *PlayerDeathEvent) GetKillerType() EntityType {
	if x != nil {
		return x.KillerType
	}
	return EntityType_EntityTypeAll
}

func (x *PlayerDeathEvent) GetKillerId() int64 {
	if x != nil {
		return x.KillerId
	}
	return 0
}

func (x *PlayerDeathEvent) GetKillerName() string {
	if x != nil {
		return x.KillerName
	}
	return ""
}

// 存储玩家数据
type SavePlayerEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgVersion        int64    `protobuf:"varint,1,opt,name=msg_version,json=msgVersion,proto3" json:"msg_version,omitempty"`
	SceneServiceAppId string   `protobuf:"bytes,2,opt,name=scene_service_app_id,json=sceneServiceAppId,proto3" json:"scene_service_app_id,omitempty"`
	UserId            int64    `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	MapId             int32    `protobuf:"varint,4,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	Position          *Vector3 `protobuf:"bytes,5,opt,name=position,proto3" json:"position,omitempty"`
	Dir               *Vector3 `protobuf:"bytes,6,opt,name=dir,proto3" json:"dir,omitempty"`
	CurHp             int32    `protobuf:"varint,7,opt,name=cur_hp,json=curHp,proto3" json:"cur_hp,omitempty"`
}

func (x *SavePlayerEvent) Reset() {
	*x = SavePlayerEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpcEventData_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SavePlayerEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SavePlayerEvent) ProtoMessage() {}

func (x *SavePlayerEvent) ProtoReflect() protoreflect.Message {
	mi := &file_grpcEventData_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SavePlayerEvent.ProtoReflect.Descriptor instead.
func (*SavePlayerEvent) Descriptor() ([]byte, []int) {
	return file_grpcEventData_proto_rawDescGZIP(), []int{3}
}

func (x *SavePlayerEvent) GetMsgVersion() int64 {
	if x != nil {
		return x.MsgVersion
	}
	return 0
}

func (x *SavePlayerEvent) GetSceneServiceAppId() string {
	if x != nil {
		return x.SceneServiceAppId
	}
	return ""
}

func (x *SavePlayerEvent) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SavePlayerEvent) GetMapId() int32 {
	if x != nil {
		return x.MapId
	}
	return 0
}

func (x *SavePlayerEvent) GetPosition() *Vector3 {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *SavePlayerEvent) GetDir() *Vector3 {
	if x != nil {
		return x.Dir
	}
	return nil
}

func (x *SavePlayerEvent) GetCurHp() int32 {
	if x != nil {
		return x.CurHp
	}
	return 0
}

// 玩家使用nft
type UserUseNFTEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgVersion     int64              `protobuf:"varint,1,opt,name=msg_version,json=msgVersion,proto3" json:"msg_version,omitempty"`
	UserId         int64              `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	NftId          string             `protobuf:"bytes,4,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
	NftType        NFTType            `protobuf:"varint,5,opt,name=nft_type,json=nftType,proto3,enum=gameMessageCore.NFTType" json:"nft_type,omitempty"`
	Num            int32              `protobuf:"varint,6,opt,name=num,proto3" json:"num,omitempty"`
	Position       *Vector3           `protobuf:"bytes,7,opt,name=position,proto3" json:"position,omitempty"`
	ConsumableData *NFTConsumableInfo `protobuf:"bytes,8,opt,name=consumable_data,json=consumableData,proto3" json:"consumable_data,omitempty"`
}

func (x *UserUseNFTEvent) Reset() {
	*x = UserUseNFTEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpcEventData_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserUseNFTEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserUseNFTEvent) ProtoMessage() {}

func (x *UserUseNFTEvent) ProtoReflect() protoreflect.Message {
	mi := &file_grpcEventData_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserUseNFTEvent.ProtoReflect.Descriptor instead.
func (*UserUseNFTEvent) Descriptor() ([]byte, []int) {
	return file_grpcEventData_proto_rawDescGZIP(), []int{4}
}

func (x *UserUseNFTEvent) GetMsgVersion() int64 {
	if x != nil {
		return x.MsgVersion
	}
	return 0
}

func (x *UserUseNFTEvent) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserUseNFTEvent) GetNftId() string {
	if x != nil {
		return x.NftId
	}
	return ""
}

func (x *UserUseNFTEvent) GetNftType() NFTType {
	if x != nil {
		return x.NftType
	}
	return NFTType_NFTTypeUnknown
}

func (x *UserUseNFTEvent) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *UserUseNFTEvent) GetPosition() *Vector3 {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *UserUseNFTEvent) GetConsumableData() *NFTConsumableInfo {
	if x != nil {
		return x.ConsumableData
	}
	return nil
}

var File_grpcEventData_proto protoreflect.FileDescriptor

var file_grpcEventData_proto_rawDesc = []byte{
	0x0a, 0x13, 0x67, 0x72, 0x70, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x1a, 0x16, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a,
	0x69, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9d, 0x02, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x73, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x6d, 0x73, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f,
	0x0a, 0x14, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33,
	0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x03, 0x64, 0x69,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x33, 0x52, 0x03, 0x64, 0x69, 0x72, 0x22, 0xdc, 0x02, 0x0a, 0x10, 0x4b, 0x69, 0x6c, 0x6c, 0x4d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x73, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x6d, 0x73, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x14,
	0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x63, 0x65, 0x6e,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x34, 0x0a,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x72,
	0x65, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x3a, 0x0a, 0x09, 0x64, 0x72, 0x6f,
	0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x64, 0x72, 0x6f,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc6, 0x02, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x44, 0x65, 0x61, 0x74, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x73,
	0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x6d, 0x73, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x14, 0x73,
	0x63, 0x65, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x72, 0x65,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0b, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8c,
	0x02, 0x0a, 0x0f, 0x53, 0x61, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x73, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x73, 0x67, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d,
	0x61, 0x70, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33,
	0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x03, 0x64, 0x69,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x33, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x5f, 0x68, 0x70,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x75, 0x72, 0x48, 0x70, 0x22, 0xac, 0x02,
	0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x55, 0x73, 0x65, 0x4e, 0x46, 0x54, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x73, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x73, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6e,
	0x66, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x66, 0x74,
	0x49, 0x64, 0x12, 0x33, 0x0a, 0x08, 0x6e, 0x66, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x46, 0x54, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07,
	0x6e, 0x66, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x34, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x33, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4b, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x46, 0x54, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x13, 0x5a, 0x11,
	0x2e, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_grpcEventData_proto_rawDescOnce sync.Once
	file_grpcEventData_proto_rawDescData = file_grpcEventData_proto_rawDesc
)

func file_grpcEventData_proto_rawDescGZIP() []byte {
	file_grpcEventData_proto_rawDescOnce.Do(func() {
		file_grpcEventData_proto_rawDescData = protoimpl.X.CompressGZIP(file_grpcEventData_proto_rawDescData)
	})
	return file_grpcEventData_proto_rawDescData
}

var file_grpcEventData_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_grpcEventData_proto_goTypes = []interface{}{
	(*UserEnterGameEvent)(nil), // 0: gameMessageCore.UserEnterGameEvent
	(*KillMonsterEvent)(nil),   // 1: gameMessageCore.KillMonsterEvent
	(*PlayerDeathEvent)(nil),   // 2: gameMessageCore.PlayerDeathEvent
	(*SavePlayerEvent)(nil),    // 3: gameMessageCore.SavePlayerEvent
	(*UserUseNFTEvent)(nil),    // 4: gameMessageCore.UserUseNFTEvent
	(*PlayerBaseData)(nil),     // 5: gameMessageCore.PlayerBaseData
	(*Vector3)(nil),            // 6: gameMessageCore.Vector3
	(*ItemBaseInfo)(nil),       // 7: gameMessageCore.ItemBaseInfo
	(EntityType)(0),            // 8: gameMessageCore.EntityType
	(NFTType)(0),               // 9: gameMessageCore.NFTType
	(*NFTConsumableInfo)(nil),  // 10: gameMessageCore.NFTConsumableInfo
}
var file_grpcEventData_proto_depIdxs = []int32{
	5,  // 0: gameMessageCore.UserEnterGameEvent.base_data:type_name -> gameMessageCore.PlayerBaseData
	6,  // 1: gameMessageCore.UserEnterGameEvent.position:type_name -> gameMessageCore.Vector3
	6,  // 2: gameMessageCore.UserEnterGameEvent.dir:type_name -> gameMessageCore.Vector3
	6,  // 3: gameMessageCore.KillMonsterEvent.position:type_name -> gameMessageCore.Vector3
	7,  // 4: gameMessageCore.KillMonsterEvent.drop_list:type_name -> gameMessageCore.ItemBaseInfo
	6,  // 5: gameMessageCore.PlayerDeathEvent.position:type_name -> gameMessageCore.Vector3
	8,  // 6: gameMessageCore.PlayerDeathEvent.killer_type:type_name -> gameMessageCore.EntityType
	6,  // 7: gameMessageCore.SavePlayerEvent.position:type_name -> gameMessageCore.Vector3
	6,  // 8: gameMessageCore.SavePlayerEvent.dir:type_name -> gameMessageCore.Vector3
	9,  // 9: gameMessageCore.UserUseNFTEvent.nft_type:type_name -> gameMessageCore.NFTType
	6,  // 10: gameMessageCore.UserUseNFTEvent.position:type_name -> gameMessageCore.Vector3
	10, // 11: gameMessageCore.UserUseNFTEvent.consumable_data:type_name -> gameMessageCore.NFTConsumableInfo
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_grpcEventData_proto_init() }
func file_grpcEventData_proto_init() {
	if File_grpcEventData_proto != nil {
		return
	}
	file_entityTypeDefine_proto_init()
	file_item_proto_init()
	file_player_proto_init()
	file_vector_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_grpcEventData_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEnterGameEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpcEventData_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KillMonsterEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpcEventData_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerDeathEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpcEventData_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SavePlayerEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpcEventData_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserUseNFTEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_grpcEventData_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_grpcEventData_proto_goTypes,
		DependencyIndexes: file_grpcEventData_proto_depIdxs,
		MessageInfos:      file_grpcEventData_proto_msgTypes,
	}.Build()
	File_grpcEventData_proto = out.File
	file_grpcEventData_proto_rawDesc = nil
	file_grpcEventData_proto_goTypes = nil
	file_grpcEventData_proto_depIdxs = nil
}
