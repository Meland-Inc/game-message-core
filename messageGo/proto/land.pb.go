// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.1
// source: land.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BigWorldServerEvent int32

const (
	// 未知类型
	BigWorldServerEvent_BigWorldServerEvent_Unknow BigWorldServerEvent = 0
	// client msg
	BigWorldServerEvent_BigWorldServerEvent_ClientMsg BigWorldServerEvent = 1
	// 添加玩家领地
	BigWorldServerEvent_BigWorldServerEvent_PlayerAreaAdd BigWorldServerEvent = 10000
	// 地格归属信息更新
	BigWorldServerEvent_BigWorldServerEvent_TileAttributeUp BigWorldServerEvent = 10001
	// 地格战斗信息更新
	BigWorldServerEvent_BigWorldServerEvent_TileFightInfoUp BigWorldServerEvent = 10002
	// 地格战斗技能信息
	BigWorldServerEvent_BigWorldServerEvent_TileUsingSkills BigWorldServerEvent = 10003
)

// Enum value maps for BigWorldServerEvent.
var (
	BigWorldServerEvent_name = map[int32]string{
		0:     "BigWorldServerEvent_Unknow",
		1:     "BigWorldServerEvent_ClientMsg",
		10000: "BigWorldServerEvent_PlayerAreaAdd",
		10001: "BigWorldServerEvent_TileAttributeUp",
		10002: "BigWorldServerEvent_TileFightInfoUp",
		10003: "BigWorldServerEvent_TileUsingSkills",
	}
	BigWorldServerEvent_value = map[string]int32{
		"BigWorldServerEvent_Unknow":          0,
		"BigWorldServerEvent_ClientMsg":       1,
		"BigWorldServerEvent_PlayerAreaAdd":   10000,
		"BigWorldServerEvent_TileAttributeUp": 10001,
		"BigWorldServerEvent_TileFightInfoUp": 10002,
		"BigWorldServerEvent_TileUsingSkills": 10003,
	}
)

func (x BigWorldServerEvent) Enum() *BigWorldServerEvent {
	p := new(BigWorldServerEvent)
	*p = x
	return p
}

func (x BigWorldServerEvent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BigWorldServerEvent) Descriptor() protoreflect.EnumDescriptor {
	return file_land_proto_enumTypes[0].Descriptor()
}

func (BigWorldServerEvent) Type() protoreflect.EnumType {
	return &file_land_proto_enumTypes[0]
}

func (x BigWorldServerEvent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BigWorldServerEvent.Descriptor instead.
func (BigWorldServerEvent) EnumDescriptor() ([]byte, []int) {
	return file_land_proto_rawDescGZIP(), []int{0}
}

//============================================================
// 作用对象
type BigWorldSkillTarget int32

const (
	BigWorldSkillTarget_BigWorldSkillTargetSelf  BigWorldSkillTarget = 0
	BigWorldSkillTarget_BigWorldSkillTargetEnemy BigWorldSkillTarget = 1
)

// Enum value maps for BigWorldSkillTarget.
var (
	BigWorldSkillTarget_name = map[int32]string{
		0: "BigWorldSkillTargetSelf",
		1: "BigWorldSkillTargetEnemy",
	}
	BigWorldSkillTarget_value = map[string]int32{
		"BigWorldSkillTargetSelf":  0,
		"BigWorldSkillTargetEnemy": 1,
	}
)

func (x BigWorldSkillTarget) Enum() *BigWorldSkillTarget {
	p := new(BigWorldSkillTarget)
	*p = x
	return p
}

func (x BigWorldSkillTarget) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BigWorldSkillTarget) Descriptor() protoreflect.EnumDescriptor {
	return file_land_proto_enumTypes[1].Descriptor()
}

func (BigWorldSkillTarget) Type() protoreflect.EnumType {
	return &file_land_proto_enumTypes[1]
}

func (x BigWorldSkillTarget) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BigWorldSkillTarget.Descriptor instead.
func (BigWorldSkillTarget) EnumDescriptor() ([]byte, []int) {
	return file_land_proto_rawDescGZIP(), []int{1}
}

// 技能效果
type BigWorldSkillEffect int32

const (
	BigWorldSkillEffect_BigWorldSkillEffectTimeReduce    BigWorldSkillEffect = 0
	BigWorldSkillEffect_BigWorldSkillEffectMoneyIncrease BigWorldSkillEffect = 1
)

// Enum value maps for BigWorldSkillEffect.
var (
	BigWorldSkillEffect_name = map[int32]string{
		0: "BigWorldSkillEffectTimeReduce",
		1: "BigWorldSkillEffectMoneyIncrease",
	}
	BigWorldSkillEffect_value = map[string]int32{
		"BigWorldSkillEffectTimeReduce":    0,
		"BigWorldSkillEffectMoneyIncrease": 1,
	}
)

func (x BigWorldSkillEffect) Enum() *BigWorldSkillEffect {
	p := new(BigWorldSkillEffect)
	*p = x
	return p
}

func (x BigWorldSkillEffect) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BigWorldSkillEffect) Descriptor() protoreflect.EnumDescriptor {
	return file_land_proto_enumTypes[2].Descriptor()
}

func (BigWorldSkillEffect) Type() protoreflect.EnumType {
	return &file_land_proto_enumTypes[2]
}

func (x BigWorldSkillEffect) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BigWorldSkillEffect.Descriptor instead.
func (BigWorldSkillEffect) EnumDescriptor() ([]byte, []int) {
	return file_land_proto_rawDescGZIP(), []int{2}
}

// 大世界地格归属状态
type BigWorldLandState int32

const (
	// 自由地格
	BigWorldLandState_BigWorldLandStateUnoccupied BigWorldLandState = 0
	// 系统地格(官方地格)
	BigWorldLandState_BigWorldLandStateOfficial BigWorldLandState = 1
	// 被攻占地格
	BigWorldLandState_BigWorldLandStateOccupied BigWorldLandState = 2
	// 基础门票地格
	BigWorldLandState_BigWorldLandStateTicket BigWorldLandState = 3
	// 购买的地格(永久归属)
	BigWorldLandState_BigWorldLandStateVip BigWorldLandState = 4
)

// Enum value maps for BigWorldLandState.
var (
	BigWorldLandState_name = map[int32]string{
		0: "BigWorldLandStateUnoccupied",
		1: "BigWorldLandStateOfficial",
		2: "BigWorldLandStateOccupied",
		3: "BigWorldLandStateTicket",
		4: "BigWorldLandStateVip",
	}
	BigWorldLandState_value = map[string]int32{
		"BigWorldLandStateUnoccupied": 0,
		"BigWorldLandStateOfficial":   1,
		"BigWorldLandStateOccupied":   2,
		"BigWorldLandStateTicket":     3,
		"BigWorldLandStateVip":        4,
	}
)

func (x BigWorldLandState) Enum() *BigWorldLandState {
	p := new(BigWorldLandState)
	*p = x
	return p
}

func (x BigWorldLandState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BigWorldLandState) Descriptor() protoreflect.EnumDescriptor {
	return file_land_proto_enumTypes[3].Descriptor()
}

func (BigWorldLandState) Type() protoreflect.EnumType {
	return &file_land_proto_enumTypes[3]
}

func (x BigWorldLandState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BigWorldLandState.Descriptor instead.
func (BigWorldLandState) EnumDescriptor() ([]byte, []int) {
	return file_land_proto_rawDescGZIP(), []int{3}
}

// 大世界地格战斗状态
type BigWorldFightState int32

const (
	// 自由
	BigWorldFightState_BigWorldFightStateFree BigWorldFightState = 0
	// 战斗中
	BigWorldFightState_BigWorldFightStateFighting BigWorldFightState = 1
)

// Enum value maps for BigWorldFightState.
var (
	BigWorldFightState_name = map[int32]string{
		0: "BigWorldFightStateFree",
		1: "BigWorldFightStateFighting",
	}
	BigWorldFightState_value = map[string]int32{
		"BigWorldFightStateFree":     0,
		"BigWorldFightStateFighting": 1,
	}
)

func (x BigWorldFightState) Enum() *BigWorldFightState {
	p := new(BigWorldFightState)
	*p = x
	return p
}

func (x BigWorldFightState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BigWorldFightState) Descriptor() protoreflect.EnumDescriptor {
	return file_land_proto_enumTypes[4].Descriptor()
}

func (BigWorldFightState) Type() protoreflect.EnumType {
	return &file_land_proto_enumTypes[4]
}

func (x BigWorldFightState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BigWorldFightState.Descriptor instead.
func (BigWorldFightState) EnumDescriptor() ([]byte, []int) {
	return file_land_proto_rawDescGZIP(), []int{4}
}

// PlaceableNFTSkill
type PlaceableSkillSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillId    int32               `protobuf:"varint,1,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
	SkillName  string              `protobuf:"bytes,2,opt,name=skill_name,json=skillName,proto3" json:"skill_name,omitempty"`
	Target     BigWorldSkillTarget `protobuf:"varint,3,opt,name=target,proto3,enum=gameMessageCore.BigWorldSkillTarget" json:"target,omitempty"`
	Effect     BigWorldSkillEffect `protobuf:"varint,4,opt,name=effect,proto3,enum=gameMessageCore.BigWorldSkillEffect" json:"effect,omitempty"`
	ValueList  []string            `protobuf:"bytes,5,rep,name=value_list,json=valueList,proto3" json:"value_list,omitempty"`
	RadiusList []int32             `protobuf:"varint,6,rep,packed,name=radius_list,json=radiusList,proto3" json:"radius_list,omitempty"`
}

func (x *PlaceableSkillSetting) Reset() {
	*x = PlaceableSkillSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_land_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceableSkillSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceableSkillSetting) ProtoMessage() {}

func (x *PlaceableSkillSetting) ProtoReflect() protoreflect.Message {
	mi := &file_land_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceableSkillSetting.ProtoReflect.Descriptor instead.
func (*PlaceableSkillSetting) Descriptor() ([]byte, []int) {
	return file_land_proto_rawDescGZIP(), []int{0}
}

func (x *PlaceableSkillSetting) GetSkillId() int32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

func (x *PlaceableSkillSetting) GetSkillName() string {
	if x != nil {
		return x.SkillName
	}
	return ""
}

func (x *PlaceableSkillSetting) GetTarget() BigWorldSkillTarget {
	if x != nil {
		return x.Target
	}
	return BigWorldSkillTarget_BigWorldSkillTargetSelf
}

func (x *PlaceableSkillSetting) GetEffect() BigWorldSkillEffect {
	if x != nil {
		return x.Effect
	}
	return BigWorldSkillEffect_BigWorldSkillEffectTimeReduce
}

func (x *PlaceableSkillSetting) GetValueList() []string {
	if x != nil {
		return x.ValueList
	}
	return nil
}

func (x *PlaceableSkillSetting) GetRadiusList() []int32 {
	if x != nil {
		return x.RadiusList
	}
	return nil
}

type BigWorldFightInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`       // 正在战斗玩家的 userId 平台ID
	PlayerId string `protobuf:"bytes,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"` // 用户ID
}

func (x *BigWorldFightInfo) Reset() {
	*x = BigWorldFightInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_land_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BigWorldFightInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigWorldFightInfo) ProtoMessage() {}

func (x *BigWorldFightInfo) ProtoReflect() protoreflect.Message {
	mi := &file_land_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigWorldFightInfo.ProtoReflect.Descriptor instead.
func (*BigWorldFightInfo) Descriptor() ([]byte, []int) {
	return file_land_proto_rawDescGZIP(), []int{1}
}

func (x *BigWorldFightInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BigWorldFightInfo) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

type BigWorldObjPro struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State   BigWorldLandState `protobuf:"varint,1,opt,name=state,proto3,enum=gameMessageCore.BigWorldLandState" json:"state,omitempty"`
	UserId  string            `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	OwnerId string            `protobuf:"bytes,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	CurHp   int32             `protobuf:"varint,4,opt,name=cur_hp,json=curHp,proto3" json:"cur_hp,omitempty"`
}

func (x *BigWorldObjPro) Reset() {
	*x = BigWorldObjPro{}
	if protoimpl.UnsafeEnabled {
		mi := &file_land_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BigWorldObjPro) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigWorldObjPro) ProtoMessage() {}

func (x *BigWorldObjPro) ProtoReflect() protoreflect.Message {
	mi := &file_land_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigWorldObjPro.ProtoReflect.Descriptor instead.
func (*BigWorldObjPro) Descriptor() ([]byte, []int) {
	return file_land_proto_rawDescGZIP(), []int{2}
}

func (x *BigWorldObjPro) GetState() BigWorldLandState {
	if x != nil {
		return x.State
	}
	return BigWorldLandState_BigWorldLandStateUnoccupied
}

func (x *BigWorldObjPro) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BigWorldObjPro) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *BigWorldObjPro) GetCurHp() int32 {
	if x != nil {
		return x.CurHp
	}
	return 0
}

type BigWorldTileSkill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillId     int32  `protobuf:"varint,1,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
	SkillLevel  int32  `protobuf:"varint,2,opt,name=skill_level,json=skillLevel,proto3" json:"skill_level,omitempty"`
	FromEntity  string `protobuf:"bytes,3,opt,name=from_entity,json=fromEntity,proto3" json:"from_entity,omitempty"`
	OwnerPlayer string `protobuf:"bytes,4,opt,name=owner_player,json=ownerPlayer,proto3" json:"owner_player,omitempty"`
}

func (x *BigWorldTileSkill) Reset() {
	*x = BigWorldTileSkill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_land_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BigWorldTileSkill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigWorldTileSkill) ProtoMessage() {}

func (x *BigWorldTileSkill) ProtoReflect() protoreflect.Message {
	mi := &file_land_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigWorldTileSkill.ProtoReflect.Descriptor instead.
func (*BigWorldTileSkill) Descriptor() ([]byte, []int) {
	return file_land_proto_rawDescGZIP(), []int{3}
}

func (x *BigWorldTileSkill) GetSkillId() int32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

func (x *BigWorldTileSkill) GetSkillLevel() int32 {
	if x != nil {
		return x.SkillLevel
	}
	return 0
}

func (x *BigWorldTileSkill) GetFromEntity() string {
	if x != nil {
		return x.FromEntity
	}
	return ""
}

func (x *BigWorldTileSkill) GetOwnerPlayer() string {
	if x != nil {
		return x.OwnerPlayer
	}
	return ""
}

type BigWorldTile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	R          int32                `protobuf:"varint,1,opt,name=r,proto3" json:"r,omitempty"`
	C          int32                `protobuf:"varint,2,opt,name=c,proto3" json:"c,omitempty"`
	FightState BigWorldFightState   `protobuf:"varint,3,opt,name=fight_state,json=fightState,proto3,enum=gameMessageCore.BigWorldFightState" json:"fight_state,omitempty"`
	FightInfo  *BigWorldFightInfo   `protobuf:"bytes,4,opt,name=fight_info,json=fightInfo,proto3" json:"fight_info,omitempty"`
	Profile    *BigWorldObjPro      `protobuf:"bytes,5,opt,name=profile,proto3" json:"profile,omitempty"`
	Skills     []*BigWorldTileSkill `protobuf:"bytes,6,rep,name=skills,proto3" json:"skills,omitempty"`
}

func (x *BigWorldTile) Reset() {
	*x = BigWorldTile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_land_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BigWorldTile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigWorldTile) ProtoMessage() {}

func (x *BigWorldTile) ProtoReflect() protoreflect.Message {
	mi := &file_land_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigWorldTile.ProtoReflect.Descriptor instead.
func (*BigWorldTile) Descriptor() ([]byte, []int) {
	return file_land_proto_rawDescGZIP(), []int{4}
}

func (x *BigWorldTile) GetR() int32 {
	if x != nil {
		return x.R
	}
	return 0
}

func (x *BigWorldTile) GetC() int32 {
	if x != nil {
		return x.C
	}
	return 0
}

func (x *BigWorldTile) GetFightState() BigWorldFightState {
	if x != nil {
		return x.FightState
	}
	return BigWorldFightState_BigWorldFightStateFree
}

func (x *BigWorldTile) GetFightInfo() *BigWorldFightInfo {
	if x != nil {
		return x.FightInfo
	}
	return nil
}

func (x *BigWorldTile) GetProfile() *BigWorldObjPro {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *BigWorldTile) GetSkills() []*BigWorldTileSkill {
	if x != nil {
		return x.Skills
	}
	return nil
}

//****************  大世界_玩家领地相关协议 *****************
type BigWorldPlayerArea struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InServer string `protobuf:"bytes,1,opt,name=in_server,json=inServer,proto3" json:"in_server,omitempty"`
	MapId    int32  `protobuf:"varint,2,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	//官方领地 ownerId 为 空
	OwnerId   string `protobuf:"bytes,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	OwnerName string `protobuf:"bytes,4,opt,name=owner_name,json=ownerName,proto3" json:"owner_name,omitempty"`
	Icon      string `protobuf:"bytes,5,opt,name=icon,proto3" json:"icon,omitempty"`
	// 购买的地格列表(永久归属) 压缩后的int32列表(begin,end, begin,end)
	VipLandTiles []string `protobuf:"bytes,7,rep,name=vip_land_tiles,json=vipLandTiles,proto3" json:"vip_land_tiles,omitempty"`
	// 门票地格列表(永久归属) 压缩后的int32列表(begin,end, begin,end)
	TicketLandTiles []string `protobuf:"bytes,8,rep,name=ticket_land_tiles,json=ticketLandTiles,proto3" json:"ticket_land_tiles,omitempty"`
	// 攻占的地格列表(临时占用) 压缩后的int32列表(begin,end, begin,end)
	OccupiedLandTiles []string `protobuf:"bytes,9,rep,name=occupied_land_tiles,json=occupiedLandTiles,proto3" json:"occupied_land_tiles,omitempty"`
}

func (x *BigWorldPlayerArea) Reset() {
	*x = BigWorldPlayerArea{}
	if protoimpl.UnsafeEnabled {
		mi := &file_land_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BigWorldPlayerArea) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigWorldPlayerArea) ProtoMessage() {}

func (x *BigWorldPlayerArea) ProtoReflect() protoreflect.Message {
	mi := &file_land_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigWorldPlayerArea.ProtoReflect.Descriptor instead.
func (*BigWorldPlayerArea) Descriptor() ([]byte, []int) {
	return file_land_proto_rawDescGZIP(), []int{5}
}

func (x *BigWorldPlayerArea) GetInServer() string {
	if x != nil {
		return x.InServer
	}
	return ""
}

func (x *BigWorldPlayerArea) GetMapId() int32 {
	if x != nil {
		return x.MapId
	}
	return 0
}

func (x *BigWorldPlayerArea) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *BigWorldPlayerArea) GetOwnerName() string {
	if x != nil {
		return x.OwnerName
	}
	return ""
}

func (x *BigWorldPlayerArea) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *BigWorldPlayerArea) GetVipLandTiles() []string {
	if x != nil {
		return x.VipLandTiles
	}
	return nil
}

func (x *BigWorldPlayerArea) GetTicketLandTiles() []string {
	if x != nil {
		return x.TicketLandTiles
	}
	return nil
}

func (x *BigWorldPlayerArea) GetOccupiedLandTiles() []string {
	if x != nil {
		return x.OccupiedLandTiles
	}
	return nil
}

type BigWorldVipLandGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Image    string   `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	VipLands []string `protobuf:"bytes,3,rep,name=vip_lands,json=vipLands,proto3" json:"vip_lands,omitempty"`
	Width    int32    `protobuf:"varint,4,opt,name=width,proto3" json:"width,omitempty"`
}

func (x *BigWorldVipLandGroup) Reset() {
	*x = BigWorldVipLandGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_land_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BigWorldVipLandGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigWorldVipLandGroup) ProtoMessage() {}

func (x *BigWorldVipLandGroup) ProtoReflect() protoreflect.Message {
	mi := &file_land_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigWorldVipLandGroup.ProtoReflect.Descriptor instead.
func (*BigWorldVipLandGroup) Descriptor() ([]byte, []int) {
	return file_land_proto_rawDescGZIP(), []int{6}
}

func (x *BigWorldVipLandGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BigWorldVipLandGroup) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *BigWorldVipLandGroup) GetVipLands() []string {
	if x != nil {
		return x.VipLands
	}
	return nil
}

func (x *BigWorldVipLandGroup) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

type BigWorldLogoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        int32                   `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PlayerId      string                  `protobuf:"bytes,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	PlayerName    string                  `protobuf:"bytes,3,opt,name=player_name,json=playerName,proto3" json:"player_name,omitempty"`
	VipLands      []string                `protobuf:"bytes,4,rep,name=vip_lands,json=vipLands,proto3" json:"vip_lands,omitempty"`
	VipLandGroups []*BigWorldVipLandGroup `protobuf:"bytes,5,rep,name=vip_land_groups,json=vipLandGroups,proto3" json:"vip_land_groups,omitempty"`
}

func (x *BigWorldLogoInfo) Reset() {
	*x = BigWorldLogoInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_land_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BigWorldLogoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigWorldLogoInfo) ProtoMessage() {}

func (x *BigWorldLogoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_land_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigWorldLogoInfo.ProtoReflect.Descriptor instead.
func (*BigWorldLogoInfo) Descriptor() ([]byte, []int) {
	return file_land_proto_rawDescGZIP(), []int{7}
}

func (x *BigWorldLogoInfo) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *BigWorldLogoInfo) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *BigWorldLogoInfo) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

func (x *BigWorldLogoInfo) GetVipLands() []string {
	if x != nil {
		return x.VipLands
	}
	return nil
}

func (x *BigWorldLogoInfo) GetVipLandGroups() []*BigWorldVipLandGroup {
	if x != nil {
		return x.VipLandGroups
	}
	return nil
}

// 大世界 实体关联的地图模板信息
type EntityMapTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId      string `protobuf:"bytes,1,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	OwnerName    string `protobuf:"bytes,2,opt,name=owner_name,json=ownerName,proto3" json:"owner_name,omitempty"`
	TemplateId   string `protobuf:"bytes,3,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	TemplateName string `protobuf:"bytes,4,opt,name=template_name,json=templateName,proto3" json:"template_name,omitempty"`
	TemplateIcon string `protobuf:"bytes,5,opt,name=template_icon,json=templateIcon,proto3" json:"template_icon,omitempty"`
}

func (x *EntityMapTemplate) Reset() {
	*x = EntityMapTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_land_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityMapTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityMapTemplate) ProtoMessage() {}

func (x *EntityMapTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_land_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityMapTemplate.ProtoReflect.Descriptor instead.
func (*EntityMapTemplate) Descriptor() ([]byte, []int) {
	return file_land_proto_rawDescGZIP(), []int{8}
}

func (x *EntityMapTemplate) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *EntityMapTemplate) GetOwnerName() string {
	if x != nil {
		return x.OwnerName
	}
	return ""
}

func (x *EntityMapTemplate) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *EntityMapTemplate) GetTemplateName() string {
	if x != nil {
		return x.TemplateName
	}
	return ""
}

func (x *EntityMapTemplate) GetTemplateIcon() string {
	if x != nil {
		return x.TemplateIcon
	}
	return ""
}

// 答题 pvp pk
type QuizePvpPkInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FromUser   string `protobuf:"bytes,2,opt,name=from_user,json=fromUser,proto3" json:"from_user,omitempty"`
	FromPlayer string `protobuf:"bytes,3,opt,name=from_player,json=fromPlayer,proto3" json:"from_player,omitempty"`
	FromName   string `protobuf:"bytes,4,opt,name=from_name,json=fromName,proto3" json:"from_name,omitempty"`
	ToUser     string `protobuf:"bytes,5,opt,name=to_user,json=toUser,proto3" json:"to_user,omitempty"`
	ToPlayer   string `protobuf:"bytes,6,opt,name=to_player,json=toPlayer,proto3" json:"to_player,omitempty"`
	ToName     string `protobuf:"bytes,7,opt,name=to_name,json=toName,proto3" json:"to_name,omitempty"`
	Ditamain   int32  `protobuf:"varint,8,opt,name=ditamain,proto3" json:"ditamain,omitempty"`
	TimeoutSec int32  `protobuf:"varint,9,opt,name=timeout_sec,json=timeoutSec,proto3" json:"timeout_sec,omitempty"`
}

func (x *QuizePvpPkInfo) Reset() {
	*x = QuizePvpPkInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_land_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuizePvpPkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuizePvpPkInfo) ProtoMessage() {}

func (x *QuizePvpPkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_land_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuizePvpPkInfo.ProtoReflect.Descriptor instead.
func (*QuizePvpPkInfo) Descriptor() ([]byte, []int) {
	return file_land_proto_rawDescGZIP(), []int{9}
}

func (x *QuizePvpPkInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QuizePvpPkInfo) GetFromUser() string {
	if x != nil {
		return x.FromUser
	}
	return ""
}

func (x *QuizePvpPkInfo) GetFromPlayer() string {
	if x != nil {
		return x.FromPlayer
	}
	return ""
}

func (x *QuizePvpPkInfo) GetFromName() string {
	if x != nil {
		return x.FromName
	}
	return ""
}

func (x *QuizePvpPkInfo) GetToUser() string {
	if x != nil {
		return x.ToUser
	}
	return ""
}

func (x *QuizePvpPkInfo) GetToPlayer() string {
	if x != nil {
		return x.ToPlayer
	}
	return ""
}

func (x *QuizePvpPkInfo) GetToName() string {
	if x != nil {
		return x.ToName
	}
	return ""
}

func (x *QuizePvpPkInfo) GetDitamain() int32 {
	if x != nil {
		return x.Ditamain
	}
	return 0
}

func (x *QuizePvpPkInfo) GetTimeoutSec() int32 {
	if x != nil {
		return x.TimeoutSec
	}
	return 0
}

var File_land_proto protoreflect.FileDescriptor

var file_land_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x6c, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x67, 0x61,
	0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x22, 0x8d, 0x02,
	0x0a, 0x15, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x3c, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x72, 0x65, 0x2e, 0x42, 0x69, 0x67, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x3c, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x72,
	0x65, 0x2e, 0x42, 0x69, 0x67, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x0a, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x49, 0x0a,
	0x11, 0x42, 0x69, 0x67, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x46, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x95, 0x01, 0x0a, 0x0e, 0x42, 0x69, 0x67,
	0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4f, 0x62, 0x6a, 0x50, 0x72, 0x6f, 0x12, 0x38, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x69, 0x67,
	0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4c, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x75, 0x72,
	0x5f, 0x68, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x75, 0x72, 0x48, 0x70,
	0x22, 0x93, 0x01, 0x0a, 0x11, 0x42, 0x69, 0x67, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x54, 0x69, 0x6c,
	0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x22, 0xaa, 0x02, 0x0a, 0x0c, 0x42, 0x69, 0x67, 0x57, 0x6f,
	0x72, 0x6c, 0x64, 0x54, 0x69, 0x6c, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x01, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x01, 0x63, 0x12, 0x44, 0x0a, 0x0b, 0x66, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x69, 0x67, 0x57, 0x6f,
	0x72, 0x6c, 0x64, 0x46, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x66,
	0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x66, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x2e,
	0x42, 0x69, 0x67, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x46, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x66, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x2e,
	0x42, 0x69, 0x67, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4f, 0x62, 0x6a, 0x50, 0x72, 0x6f, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x69, 0x67, 0x57, 0x6f, 0x72,
	0x6c, 0x64, 0x54, 0x69, 0x6c, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x06, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x22, 0x98, 0x02, 0x0a, 0x12, 0x42, 0x69, 0x67, 0x57, 0x6f, 0x72, 0x6c, 0x64,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e,
	0x76, 0x69, 0x70, 0x5f, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x69, 0x70, 0x4c, 0x61, 0x6e, 0x64, 0x54, 0x69, 0x6c,
	0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x61, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x64, 0x54, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2e,
	0x0a, 0x13, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x63, 0x63,
	0x75, 0x70, 0x69, 0x65, 0x64, 0x4c, 0x61, 0x6e, 0x64, 0x54, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x6f,
	0x0a, 0x14, 0x42, 0x69, 0x67, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x70, 0x4c, 0x61, 0x6e,
	0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x76, 0x69, 0x70, 0x5f, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x76, 0x69, 0x70, 0x4c, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x22,
	0xd5, 0x01, 0x0a, 0x10, 0x42, 0x69, 0x67, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4c, 0x6f, 0x67, 0x6f,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76,
	0x69, 0x70, 0x5f, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x76, 0x69, 0x70, 0x4c, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x4d, 0x0a, 0x0f, 0x76, 0x69, 0x70, 0x5f,
	0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x72, 0x65, 0x2e, 0x42, 0x69, 0x67, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x70, 0x4c,
	0x61, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d, 0x76, 0x69, 0x70, 0x4c, 0x61, 0x6e,
	0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x11, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x4d, 0x61, 0x70, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x63,
	0x6f, 0x6e, 0x22, 0x87, 0x02, 0x0a, 0x0e, 0x51, 0x75, 0x69, 0x7a, 0x65, 0x50, 0x76, 0x70, 0x50,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x69, 0x74, 0x61, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x64, 0x69, 0x74, 0x61, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x2a, 0xfe, 0x01, 0x0a,
	0x13, 0x42, 0x69, 0x67, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x69, 0x67, 0x57, 0x6f, 0x72, 0x6c, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x69, 0x67, 0x57, 0x6f, 0x72, 0x6c, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4d, 0x73, 0x67, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x21, 0x42, 0x69, 0x67, 0x57, 0x6f,
	0x72, 0x6c, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x41, 0x64, 0x64, 0x10, 0x90, 0x4e, 0x12,
	0x28, 0x0a, 0x23, 0x42, 0x69, 0x67, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x54, 0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x55, 0x70, 0x10, 0x91, 0x4e, 0x12, 0x28, 0x0a, 0x23, 0x42, 0x69, 0x67,
	0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x54, 0x69, 0x6c, 0x65, 0x46, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70,
	0x10, 0x92, 0x4e, 0x12, 0x28, 0x0a, 0x23, 0x42, 0x69, 0x67, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x54, 0x69, 0x6c, 0x65, 0x55,
	0x73, 0x69, 0x6e, 0x67, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x93, 0x4e, 0x2a, 0x50, 0x0a,
	0x13, 0x42, 0x69, 0x67, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x69, 0x67, 0x57, 0x6f, 0x72, 0x6c, 0x64,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x10,
	0x00, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x69, 0x67, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x10, 0x01, 0x2a,
	0x5e, 0x0a, 0x13, 0x42, 0x69, 0x67, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x69, 0x67, 0x57, 0x6f, 0x72,
	0x6c, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x42, 0x69, 0x67,
	0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x10, 0x01, 0x2a,
	0xa9, 0x01, 0x0a, 0x11, 0x42, 0x69, 0x67, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4c, 0x61, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x69, 0x67, 0x57, 0x6f, 0x72, 0x6c,
	0x64, 0x4c, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x6f, 0x63, 0x63, 0x75,
	0x70, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x69, 0x67, 0x57, 0x6f, 0x72,
	0x6c, 0x64, 0x4c, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x69, 0x67, 0x57, 0x6f, 0x72, 0x6c,
	0x64, 0x4c, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x69,
	0x65, 0x64, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x69, 0x67, 0x57, 0x6f, 0x72, 0x6c, 0x64,
	0x4c, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x10,
	0x03, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x69, 0x67, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4c, 0x61, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x69, 0x70, 0x10, 0x04, 0x2a, 0x50, 0x0a, 0x12, 0x42,
	0x69, 0x67, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x46, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x69, 0x67, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x46, 0x69, 0x67,
	0x68, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x72, 0x65, 0x65, 0x10, 0x00, 0x12, 0x1e, 0x0a,
	0x1a, 0x42, 0x69, 0x67, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x46, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x42, 0x13, 0x5a,
	0x11, 0x2e, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x6f, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_land_proto_rawDescOnce sync.Once
	file_land_proto_rawDescData = file_land_proto_rawDesc
)

func file_land_proto_rawDescGZIP() []byte {
	file_land_proto_rawDescOnce.Do(func() {
		file_land_proto_rawDescData = protoimpl.X.CompressGZIP(file_land_proto_rawDescData)
	})
	return file_land_proto_rawDescData
}

var file_land_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_land_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_land_proto_goTypes = []interface{}{
	(BigWorldServerEvent)(0),      // 0: gameMessageCore.BigWorldServerEvent
	(BigWorldSkillTarget)(0),      // 1: gameMessageCore.BigWorldSkillTarget
	(BigWorldSkillEffect)(0),      // 2: gameMessageCore.BigWorldSkillEffect
	(BigWorldLandState)(0),        // 3: gameMessageCore.BigWorldLandState
	(BigWorldFightState)(0),       // 4: gameMessageCore.BigWorldFightState
	(*PlaceableSkillSetting)(nil), // 5: gameMessageCore.PlaceableSkillSetting
	(*BigWorldFightInfo)(nil),     // 6: gameMessageCore.BigWorldFightInfo
	(*BigWorldObjPro)(nil),        // 7: gameMessageCore.BigWorldObjPro
	(*BigWorldTileSkill)(nil),     // 8: gameMessageCore.BigWorldTileSkill
	(*BigWorldTile)(nil),          // 9: gameMessageCore.BigWorldTile
	(*BigWorldPlayerArea)(nil),    // 10: gameMessageCore.BigWorldPlayerArea
	(*BigWorldVipLandGroup)(nil),  // 11: gameMessageCore.BigWorldVipLandGroup
	(*BigWorldLogoInfo)(nil),      // 12: gameMessageCore.BigWorldLogoInfo
	(*EntityMapTemplate)(nil),     // 13: gameMessageCore.EntityMapTemplate
	(*QuizePvpPkInfo)(nil),        // 14: gameMessageCore.QuizePvpPkInfo
}
var file_land_proto_depIdxs = []int32{
	1,  // 0: gameMessageCore.PlaceableSkillSetting.target:type_name -> gameMessageCore.BigWorldSkillTarget
	2,  // 1: gameMessageCore.PlaceableSkillSetting.effect:type_name -> gameMessageCore.BigWorldSkillEffect
	3,  // 2: gameMessageCore.BigWorldObjPro.state:type_name -> gameMessageCore.BigWorldLandState
	4,  // 3: gameMessageCore.BigWorldTile.fight_state:type_name -> gameMessageCore.BigWorldFightState
	6,  // 4: gameMessageCore.BigWorldTile.fight_info:type_name -> gameMessageCore.BigWorldFightInfo
	7,  // 5: gameMessageCore.BigWorldTile.profile:type_name -> gameMessageCore.BigWorldObjPro
	8,  // 6: gameMessageCore.BigWorldTile.skills:type_name -> gameMessageCore.BigWorldTileSkill
	11, // 7: gameMessageCore.BigWorldLogoInfo.vip_land_groups:type_name -> gameMessageCore.BigWorldVipLandGroup
	8,  // [8:8] is the sub-list for method output_type
	8,  // [8:8] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_land_proto_init() }
func file_land_proto_init() {
	if File_land_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_land_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaceableSkillSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_land_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BigWorldFightInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_land_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BigWorldObjPro); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_land_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BigWorldTileSkill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_land_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BigWorldTile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_land_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BigWorldPlayerArea); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_land_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BigWorldVipLandGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_land_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BigWorldLogoInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_land_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityMapTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_land_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuizePvpPkInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_land_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_land_proto_goTypes,
		DependencyIndexes: file_land_proto_depIdxs,
		EnumInfos:         file_land_proto_enumTypes,
		MessageInfos:      file_land_proto_msgTypes,
	}.Build()
	File_land_proto = out.File
	file_land_proto_rawDesc = nil
	file_land_proto_goTypes = nil
	file_land_proto_depIdxs = nil
}
